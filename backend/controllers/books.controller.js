const bookServices = require("../services/book.services");

/**
 * Function to get all books from the Books model
 * @param {Object} req - Request from client side
 * @param {Object} res - Response generated by the function
 * @returns {Response} response status
 */
const getBooks = async (req, res) => {
  let books;
  try {
    books = await bookServices.findBooks(req.body.userId);
  } catch (err) {
    console.log(err);
  }

  if (!books) {
    return res.status(400).json({ message: "No books found" });
  }

  return res.status(200).json({ books });
};

/**
 * Function to add a new book in the Books model
 * @param {Object} req - Request from client side
 * @param {Object} res - Response generated by the function
 * @returns {Response} response status with a newBook object
 */
const addBook = async (req, res) => {
  let newBook;

  try {
    // Check if the book exists or not
    const book = await bookServices.findOneBook(req.body.title);

    // If it exists then just update the quantity
    if (book) {
      newBook = bookServices.updateQuantity(book, req.body.quantity);
    } else {
      newBook = bookServices.addNewBook(req.body);
    }
  } catch (error) {
    console.log(error);
  }

  if (!newBook) {
    return res.status(500).json({ message: "Not able to add book" });
  }

  return res.status(201).json({ newBook });
};

/**
 * Function to get a book with its id and send its details as a response
 * @param {Object} req
 * @param {Object} res
 * @returns {Response} status code with a json message of book details
 */
const getById = async (req, res) => {
  const id = req.params.id.slice(1);
  let book;
  try {
    book = await bookServices.findBookById(id);
  } catch (error) {
    console.log(error);
  }

  if (!book) {
    return res.status(500).json({ message: "Not able to get book" });
  }

  return res.status(201).json({ book });
};

/**
 * Function to update the details of a book by getting its id
 * @param {Object} req
 * @param {Object} res
 * @returns {Response} response whether the book has been edited or not
 */
const updateBook = async (req, res) => {
  const id = req.params.id;
  let book;

  try {
    book = await bookServices.updateBook(id, req.body);
  } catch (error) {
    console.log(error);
  }

  if (!book) {
    return res.status(500).json({ message: "Not able to update book" });
  }

  return res.status(201).json({ message: "Edited successfully" });
};

/**
 * Function to delete a Book by its ID
 * @param {Object} req
 * @param {Object} res
 * @returns {Response} response status
 */
const deleteBook = async (req, res) => {
  const id = req.params.id;
  let book;

  try {
    book = await bookServices.removeBook(id);
  } catch (error) {
    console.log(error);
  }

  if (!book) {
    return res.status(500).json({ message: "Not able to delete book" });
  }

  return res.status(201).json({ message: "Deleted successfully" });
};

/**
 * Function to empty the books model
 * @param {Object} req
 * @param {Object} res
 * @returns {Response} response status
 */
const deleteAllBooks = async (req, res) => {
  try {
    await bookServices.deleteAllBooks;
    return res.status(201).json({ message: "Deleted all books" });
  } catch (error) {
    console.log(error);
  }
};

module.exports = {
  getBooks,
  addBook,
  getById,
  updateBook,
  deleteBook,
  deleteAllBooks,
};
