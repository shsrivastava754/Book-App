const CartService = require("../services/cart.service");

/**
 * Class for Cart Controller
 */
class CartController {
  /**
   * Function to add a book to cart
   * @param {Object} req
   * @param {Object} res - Response generated by the function
   * @returns {Response} status code with a message if the book has been added to cart or not
   */
  static async addToCart(req, res) {
    let cartItem;
    try {
      // First check if item already exists or not in the cart
      const item = await CartService.returnItem(
        req.body.userId,
        req.body.bookId
      );

      // If it exists in the collection, then just update the quantity
      if (item) {
        cartItem = CartService.updateItemQuantity(item);
      }

      // Else add new item to the collection
      else {
        await CartService.addNewItem(req.body);
      }

      if (!cartItem) {
        return res.status(500).json({ message: "Not added to cart" });
      }

      return res.status(201).json({ cartItem });
    } catch (error) {
      return res.status(500).json({ message: error });
    }
  }

  /**
   * Function to get all items present in the cart of a particular user
   * @param {Object} req
   * @param {Object} res
   * @returns {Response} cart items of the user
   */
  static async getCartItems(req, res) {
    let items;
    try {
      items = await CartService.returnCartItems(req.body.id);
      if (!items) {
        return res.status(400).json({ message: "No cart items" });
      }
      return res.status(200).json({ items });
    } catch (err) {
      return res.status(500).json({ message: error });
    }
  }

  /**
   * Function to clear the cart of a particular user
   * @param {Object} req
   * @param {Object} res
   * @returns {Response} status code with a success message or error message
   */
  static async clearCart(req, res) {
    try {
      await CartService.clearCart(req.body.userId);
      return res.status(201).json({ message: "Deleted cart items" });
    } catch (error) {
      return res.status(500).json({ message: error });
    }
  }

  /**
   * Function to completely empty the cart collection
   * @param {Object} req
   * @param {Object} res
   * @returns {Response} a status code if the collection is cleared or not
   */
  static async clearCartModel(req, res) {
    try {
      await CartService.clearCartModel();
      return res.status(201).json({ message: "Deleted cart model items" });
    } catch (error) {
      return res.status(500).json({ message: error });
    }
  }

  /**
   * Function to delete item from the cart of the user
   * @param {Object} req
   * @param {Object} res
   * @returns {Response} a status code if the item is deleted from the cart or not
   */
  static async deleteItem(req, res) {
    try {
      await CartService.deleteItem(req.params.userId, req.params.itemId);
      return res.status(201).json({ message: "Deleted cart model item" });
    } catch (error) {
      return res.status(500).json({ message: error });
    }
  }

  /**
   * Compares the quantities of books in cart and books collection
   * @param {Request} req
   * @param {Response} res
   */
  static async compareQuantity(req, res) {
    let result = await CartService.compareCartQuantity(
      req.body.userId,
      req.body.bookId
    );
    return res.status(201).json({ result: result });
  }

  /**
   * Function to complete the shopping of the user
   * @param {Request} req 
   * @param {Response} res 
   * @returns 
   */
  static async checkout(req,res){
    let result = await CartService.checkoutUser(req.body.userId);
    return res.status(201).json({ result: result });
  }
}

module.exports = CartController;
