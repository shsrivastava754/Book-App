const cartsServices = require("../services/cart.services");

/**
 * Function to add a book to cart
 * @param {Object} req
 * @param {Object} res - Response generated by the function
 * @returns {Response} status code with a message if the book has been added to cart or not
 */
const addToCart = async (req, res) => {
  let cartItem;
  try {
    // First check if item already exists or not in the cart
    const item = await cartsServices.returnItem(
      req.body.userId,
      req.body.title
    );

    // If it exists in the collection, then just update the quantity
    if (item) {
      cartItem = cartsServices.updateItemQuantity(item);
    }

    // Else add new item to the collection
    else {
      await cartsServices.addNewItem(req.body);
    }

    if (!cartItem) {
      return res.status(500).json({ message: "Not added to cart" });
    }

    return res.status(201).json({ cartItem });
  } catch (error) {
    return res.status(500).json({ message: error });
  }
};

/**
 * Function to get all items present in the cart of a particular user
 * @param {Object} req
 * @param {Object} res
 * @returns {Response} cart items of the user
 */
const getCartItems = async (req, res) => {
  let items;
  try {
    items = await cartsServices.returnCartItems(req.body.id);
    if (!items) {
      return res.status(400).json({ message: "No cart items" });
    }
    return res.status(200).json({ items });
  } catch (err) {
    return res.status(500).json({ message: error });
  }
};

/**
 * Function to clear the cart of a particular user
 * @param {Object} req
 * @param {Object} res
 * @returns {Response} status code with a success message or error message
 */
const clearCart = async (req, res) => {
  try {
    await cartsServices.clearCart(req.body.userId);
    return res.status(201).json({ message: "Deleted cart items" });
  } catch (error) {
    return res.status(500).json({ message: error });
  }
};

/**
 * Function to completely empty the cart collection
 * @param {Object} req
 * @param {Object} res
 * @returns {Response} a status code if the collection is cleared or not
 */
const clearCartModel = async (req, res) => {
  try {
    await cartsServices.clearCartModel();
    return res.status(201).json({ message: "Deleted cart model items" });
  } catch (error) {
    return res.status(500).json({ message: error });
  }
};

/**
 * Function to delete item from the cart of the user
 * @param {Object} req
 * @param {Object} res
 * @returns {Response} a status code if the item is deleted from the cart or not
 */
const deleteItem = async (req, res) => {
  try {
    await cartsServices.deleteItem(req.params.userId, req.params.itemId);
    return res.status(201).json({ message: "Deleted cart model item" });
  } catch (error) {
    return res.status(500).json({ message: error });
  }
};

module.exports = {
  addToCart,
  getCartItems,
  clearCart,
  clearCartModel,
  deleteItem,
};
